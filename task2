import csv
import random
import math

def load_data(filepath):
    with open(filepath, 'r') as file:
        reader = csv.DictReader(file)
        data = []
        for row in reader:
            try:
                age = float(row['Age'])
                income = float(row['Annual Income (k$)'])
                score = float(row['Spending Score (1-100)'])
                data.append([age, income, score])
            except:
                continue
        return data

def euclidean_distance(p1, p2):
    return math.sqrt(sum((p1[i] - p2[i])**2 for i in range(len(p1))))

def initialize_centroids(data, k):
    return random.sample(data, k)

def assign_clusters(data, centroids):
    clusters = [[] for _ in centroids]
    for point in data:
        distances = [euclidean_distance(point, c) for c in centroids]
        closest_idx = distances.index(min(distances))
        clusters[closest_idx].append(point)
    return clusters

def calculate_centroids(clusters):
    centroids = []
    for cluster in clusters:
        if len(cluster) == 0:
            centroids.append([0]*len(cluster[0]))
            continue
        centroid = [sum(dim)/len(cluster) for dim in zip(*cluster)]
        centroids.append(centroid)
    return centroids

def has_converged(old_centroids, new_centroids, threshold=1e-4):
    total_movement = sum(
        euclidean_distance(old_centroids[i], new_centroids[i]) for i in range(len(old_centroids))
    )
    return total_movement < threshold

def kmeans(data, k=3, max_iters=100):
    centroids = initialize_centroids(data, k)
    for _ in range(max_iters):
        clusters = assign_clusters(data, centroids)
        new_centroids = calculate_centroids(clusters)
        if has_converged(centroids, new_centroids):
            break
        centroids = new_centroids
    return clusters, centroids

# Main
data = load_data('/content/Mall_Customers.csv')  # Update path if needed
clusters, centroids = kmeans(data, k=5)

# Show results
for idx, cluster in enumerate(clusters):
    print(f"\nCluster {idx+1}:")
    for point in cluster[:5]:  # Show first 5 points per cluster
        print(point)
